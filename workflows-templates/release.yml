name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .[dev]

    - name: Run tests
      run: |
        pytest --cov=yaplon --cov-report=xml --cov-report=term-missing

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .[dev]

    - name: Build package
      run: |
        python setup.py sdist bdist_wheel

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  build-binaries:
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            binary-name: yaplon-linux-x64
          - os: windows-latest
            binary-name: yaplon-windows-x64.exe
          - os: macOS-latest
            binary-name: yaplon-macos-x64

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .[dev]

    - name: Build binary
      run: |
        pyinstaller --onefile --name=${{ matrix.binary-name }} yaplon/__main__.py

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: dist/${{ matrix.binary-name }}*

  release:
    runs-on: ubuntu-latest
    needs: [test, build, build-binaries]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install -e .[dev]
        pip install twine

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist
        path: dist/

    - name: Download binary artifacts
      uses: actions/download-artifact@v3
      with:
        name: binaries
        path: dist/

    - name: Get version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Verify version consistency
      run: |
        PACKAGE_VERSION=$(python -c "import yaplon; print(yaplon.__version__)")
        TAG_VERSION="${{ steps.get_version.outputs.VERSION }}"
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch!"
          exit 1
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.TAG_NAME }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          Release ${{ steps.get_version.outputs.VERSION }}
          
          ## Installation
          
          ### From PyPI
          ```bash
          pip install yaplon==${{ steps.get_version.outputs.VERSION }}
          ```
          
          ### Binary Downloads
          Download the appropriate binary for your platform from the assets below.
          
          ## Changes
          See [CHANGELOG.md](https://github.com/twardoch/yaplon/blob/master/CHANGELOG.md) for details.
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        # Upload Python package files
        for file in dist/*.whl dist/*.tar.gz; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ steps.get_version.outputs.TAG_NAME }} "$file"
          fi
        done
        
        # Upload binary files
        for file in dist/yaplon-*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            gh release upload ${{ steps.get_version.outputs.TAG_NAME }} "$file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz

  notify:
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.release.result == 'success'
      run: |
        echo "üéâ Release ${{ needs.release.outputs.version }} completed successfully!"
        
    - name: Notify failure
      if: needs.release.result == 'failure'
      run: |
        echo "‚ùå Release failed!"
        exit 1